from functools import partial

import numpy as np
from dpipe.batch_iter import Infinite, multiply, apply_at
from dpipe.im.utils import identity
from tqdm.auto import tqdm

from m3da_exp.batch_iter import extract_patch_uda, center_choice_uda_ts, load_by_random_id_uda
from m3da_exp.batch_iter.augmentations import d48_augm, gamma_augm, nnunet_augm
from m3da_exp.im.shape_utils import prepend_dims_pw4d


apply_d48 = True
apply_gamma = False
apply_nnunet_augm = False

n_tumors = np.array(list(map(dataset.n_tumors, tqdm(train_ids["source"]))))
nonzero_fraction = 0.75
sync_sampling = True

batch_iter = Infinite(
    load_by_random_id_uda(load_x, load_y, dataset.tumor_centers, ids_s=train_ids["source"], ids_t=train_ids["target"],
                          weights=n_tumors / np.sum(n_tumors), random_state=random_state),
    multiply(func=np.float32),
    partial(center_choice_uda_ts, y_patch_size=y_patch_size, random_state=random_state,
            nonzero_fraction=nonzero_fraction, sync_sampling=sync_sampling, center_random_shift=y_patch_size // 2 - 1),
    partial(extract_patch_uda, patch_sizes=(x_patch_size, y_patch_size), padding_values=(np.min, 0)),
    partial(d48_augm, random_state=random_state, flip_dims=flip_dims, rot_dims=rot_dims) if apply_d48 else identity,
    apply_at(index=[0, 1], func=gamma_augm, random_state=random_state) if apply_gamma else identity,
    apply_at(index=[0, 1], func=nnunet_augm, random_state=random_state) if apply_nnunet_augm else identity,
    multiply(func=prepend_dims_pw4d),

    batch_size=batch_size, batches_per_epoch=batches_per_epoch
)
