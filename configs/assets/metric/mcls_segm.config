from functools import partial, wraps

import numpy as np
from dpipe.im.metrics import dice_score

from m3da_exp.commands import aggregate_metric


def singleclass(i):
    def decorator(metric):
        @wraps(metric)
        def wrapper(true, pred):
            return metric(true == i, np.argmax(pred, axis=0) == i)
        return wrapper
    return decorator


final_metrics = {f'dice_{i}': singleclass(i)(dice_score) for i in labels_list if i != background_logit_idx}
val_metrics = {k: partial(aggregate_metric, metric=v) for k, v in final_metrics.items()}
