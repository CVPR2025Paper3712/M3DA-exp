from functools import partial, wraps

import numpy as np
from dpipe.im.metrics import dice_score

from m3da_exp.commands import aggregate_metric


def brats_class(lbl):
    def decorator(metric):
        @wraps(metric)
        def wrapper(true, pred):
            pred = np.argmax(pred, axis=0)
            if lbl == "WT":
                return metric(true > 0, pred > 0)
            if lbl == "TC":
                return metric((true == 3) | (true == 1), (pred == 3) | (pred == 1))
            if lbl == "ET":
                return metric(true == 3, pred == 3)
        return wrapper
    return decorator


final_metrics = {f'dice_{lbl}': brats_class(lbl)(dice_score) for lbl in ("ET", "TC", "WT")}
val_metrics = {k: partial(aggregate_metric, metric=v) for k, v in final_metrics.items()}
