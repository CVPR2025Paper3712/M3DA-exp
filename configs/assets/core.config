from functools import partial

import numpy as np
from dpipe.config import if_missing, lock_dir, run
from dpipe.layout import Flat
from dpipe.train import train, Checkpoints, Policy, TimeProfiler
from dpipe.train.logging import TBLogger
from dpipe.torch import save_model_state, load_model_state, train_step
from nnunetv2.utilities.network_initialization import InitWeights_He

from m3da_exp.batch_iter import SPATIAL_DIMS
from m3da_exp.commands import compute_test_metrics, compute_val_metrics, skip_predict, embed_to_folder
from m3da_exp.const import RANDOM_STATE
from m3da_exp.utils import fix_seed


random_state = np.random.RandomState(RANDOM_STATE)
device = 'cuda'

# ### 1. PATHS ###

log_path = 'train_logs'
saved_model_path = 'model.pth'
saved_optim_path = 'optimizer.pth'
test_predictions_path = 'test_predictions'
test_metrics_path = 'test_metrics'
test_embed_path = 'test_embeddings'
checkpoints_path = 'checkpoints'

# ### 2. BUILD EXPERIMENT ###

layout = Flat(split)
train_ids = layout.get_ids('train')
val_ids = layout.get_ids('val')
test_ids = layout.get_ids('test')

# ### 3. TRAIN MODEL ###

# 3.1 validation
val_metrics = {}
load_y_val = load_y
validate_step = partial(compute_val_metrics, predict=val_predict, load_x=load_x, load_y=load_y_val,
                        ids=val_ids, metrics=val_metrics)

# 3.2 train
logger = TBLogger(log_path=log_path)
train_kwargs = dict(lr=lr, architecture=architecture, optimizer=optimizer, criterion=criterion)
checkpoints = Checkpoints(checkpoints_path, {
    **{k: v for k, v in train_kwargs.items() if isinstance(v, Policy)},
    saved_model_path: architecture, saved_optim_path: optimizer
})

amp = False
scaler = None  # torch.cuda.amp.GradScaler()
clip_grad = None

train_model = train(
    train_step=partial(train_step, scaler=scaler, clip_grad=clip_grad),
    batch_iter=batch_iter,
    n_epochs=n_epochs,
    logger=logger,
    checkpoints=checkpoints,
    validate=validate_step,
    time=TimeProfiler(logger.logger),
    **train_kwargs
)

# ### 4. PREDICT ###

predict_to_dir = skip_predict

load_y_test = dataset.orig_mask
pred_zoom_order = 1
pred_spatial_dims = SPATIAL_DIMS
n_tta_iter = 1  # 8
flip_dims = SPATIAL_DIMS
rot_dims = SPATIAL_DIMS[:2]
evaluate_individual_metrics = partial(
    compute_test_metrics,
    load_y=load_y_test, load_x=load_x, predict=predict, metrics=final_metrics, test_ids=test_ids,
    dims=pred_spatial_dims, zoom_order=pred_zoom_order,
    random_state=random_state, n_tta_iter=n_tta_iter, flip_dims=flip_dims,rot_dims=rot_dims,
)

embed_to_dir = partial(embed_to_folder, load_x=load_x, architecture=architecture, test_ids=test_ids,
                       patch_size=x_patch_size, device=device)

# ### 5. RUN EXPERIMENT ###

# resource-manager execute sequence below:
# ##########################################
run_experiment = run(
    fix_seed(seed=RANDOM_STATE),
    lock_dir(),
    architecture.to(device),
    architecture.apply(InitWeights_He(1e-2)),
    if_missing(lambda p: [train_model, save_model_state(architecture, p)], saved_model_path),
    load_model_state(architecture, saved_model_path),
    if_missing(predict_to_dir, output_path=test_predictions_path),
    if_missing(evaluate_individual_metrics, results_path=test_metrics_path),
    if_missing(embed_to_dir, results_path=test_embed_path),
)
# ##########################################
