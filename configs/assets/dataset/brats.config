import numpy as np

from amid.internals import CacheToDisk
from amid.brats2021 import BraTS2021
from connectome import Apply, CacheToRam, Chain, Filter

from m3da_exp.dataset.brats import BuildMask, AddFold
from m3da_exp.dataset.cyclegan import CycleGAN2DPredict, CycleGAN3DPredict
from m3da_exp.dataset.utils import Identity, ScaleQ, Shape, Orig
from m3da_exp.paths import BRATS_PATH_RAW


n_chans_in = 1
n_chans_out = 4
labels_list = tuple(range(n_chans_out))
background_logit_idx = 0

dataset_base = Chain(BraTS2021(BRATS_PATH_RAW), Filter(lambda fold: fold == 'TrainingData'), BuildMask(),
                     Orig(), AddFold(), CacheToDisk(('ids', 'fold')), CacheToRam(('ids', 'fold')))

ids_base = np.array(dataset_base.ids)
folds_base = np.array(list(map(dataset_base.fold, ids_base)))

ids_t1_src = ids_base[folds_base == 't1|src|tr'].tolist()
ids_t1_trg_tr = ids_base[folds_base == 't1|trg|tr'].tolist()
ids_t1_trg_ts = ids_base[folds_base == 't1|trg|ts'].tolist()

ids_t1ce_src = ids_base[folds_base == 't1ce|src|tr'].tolist()
ids_t1ce_trg_tr = ids_base[folds_base == 't1ce|trg|tr'].tolist()
ids_t1ce_trg_ts = ids_base[folds_base == 't1ce|trg|ts'].tolist()

ids_t2_src = ids_base[folds_base == 't2|src|tr'].tolist()
ids_t2_trg_tr = ids_base[folds_base == 't2|trg|tr'].tolist()
ids_t2_trg_ts = ids_base[folds_base == 't2|trg|ts'].tolist()

ids_flair_src = ids_base[folds_base == 'flair|src|tr'].tolist()
ids_flair_trg_tr = ids_base[folds_base == 'flair|trg|tr'].tolist()
ids_flair_trg_ts = ids_base[folds_base == 'flair|trg|ts'].tolist()

new_spacing = (1.0, 1.0, 1.0)  # to be able to access the unified spacing of BraTS
cache_size = None

use_cyclegan2d = False
generator = None

use_cyclegan3d = False
generator3d = None

dataset = Chain(
    dataset_base, ScaleQ(), Shape(),  # no need to zoom, the spacing is already (1.0, 1.0, 1.0)
    CycleGAN2DPredict(generator=generator, device=device) if use_cyclegan2d else Identity(),  # CycleGAN2D: autorun
    CycleGAN3DPredict(generator=generator3d, device=device) if use_cyclegan3d else Identity(),  # CycleGAN3D: autorun
    Apply(image=np.float16, mask=np.uint8),
    CacheToRam(('ids', 'shape', 'image', 'mask', 'orig_mask'), size=cache_size),
    Apply(image=np.float32, mask=np.float32)
)

load_x = dataset.image
load_y = dataset.mask

pred_n_add_dims = 2
pred_n_extract_dims = 1
