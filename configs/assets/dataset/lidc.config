import numpy as np
from amid.internals import CacheToDisk
from amid.lidc import LIDC
from connectome import Apply, CacheToRam, Chain

from m3da_exp.const import LIDC_SPACING
from m3da_exp.dataset.lidc import AddFold, NormalizeLIDC
from m3da_exp.dataset.cyclegan import CycleGAN2DPredict, CycleGAN3DPredict
from m3da_exp.dataset.utils import Identity, MultiClassZoom, Orig, ScaleQ, Shape, TumorCenters
from m3da_exp.paths import LIDC_PATH_RAW


n_chans_in = 1
n_chans_out = 2
labels_list = tuple(range(n_chans_out))
background_logit_idx = 0

dataset_base = Chain(
    LIDC(LIDC_PATH_RAW) >> NormalizeLIDC(),
    Orig() >> AddFold() >> CacheToDisk(('ids', 'fold')) >> CacheToRam(('ids', 'fold'))
)

ids_base = np.array(dataset_base.ids)
folds_base = np.array(list(map(dataset_base.fold, ids_base)))

ids_ce = ids_base[folds_base == 'CE'].tolist()
ids_nonce_0 = ids_base[folds_base == 'nonCE-0'].tolist()
ids_nonce_1 = ids_base[folds_base == 'nonCE-1'].tolist()

new_spacing = LIDC_SPACING
cache_size = None

use_cyclegan2d = False
generator = None

use_cyclegan3d = False
generator3d = None

dataset = Chain(
    dataset_base, MultiClassZoom(new_spacing=new_spacing, labels_list=labels_list), ScaleQ(), Shape(),
    CycleGAN2DPredict(generator=generator, device=device) if use_cyclegan2d else Identity(),  # CycleGAN2D: autorun
    CycleGAN3DPredict(generator=generator3d, device=device) if use_cyclegan3d else Identity(),  # CycleGAN3D: autorun
    Apply(image=np.float16, mask=np.uint8),
    CacheToRam(('ids', 'shape', 'image', 'mask', 'orig_mask'), size=cache_size),
    TumorCenters(),
    CacheToRam(('tumor_centers', 'n_tumors'), size=cache_size),
    Apply(image=np.float32, mask=np.float32)
)

load_x = dataset.image
load_y = dataset.mask

pred_n_add_dims = 2
pred_n_extract_dims = 1
