import numpy as np

from amid.internals import CacheToDisk
from amid.cc359 import CC359
from connectome import Apply, CacheToRam, Chain, Filter

from m3da_exp.const import CC359_SPACING
from m3da_exp.dataset.cc359 import BuildMask, AddFold
from m3da_exp.dataset.cyclegan import CycleGAN2DPredict, CycleGAN3DPredict
from m3da_exp.dataset.utils import Identity, Orig, MultiClassZoom, ScaleQ, Shape
from m3da_exp.paths import CC359_PATH_RAW


n_chans_in = 1
n_chans_out = 4
labels_list = tuple(range(n_chans_out))
background_logit_idx = 0

# Filter(lambda image, mask: (mask is not None) and (image.shape == mask.shape))  # seems like shape is OK
dataset_base = Chain(CC359(CC359_PATH_RAW), BuildMask(), Filter(lambda mask: mask is not None), AddFold(), Orig(),
                     CacheToDisk(('ids', 'fold')), CacheToRam(('ids', 'fold')))

ids_base = np.array(dataset_base.ids)
folds_base = np.array(list(map(dataset_base.fold, ids_base)))

ids_ge15_tr = ids_base[folds_base == '15-ge|tr'].tolist()
ids_ge15_ts = ids_base[folds_base == '15-ge|ts'].tolist()

ids_ph15_tr = ids_base[folds_base == '15-philips|tr'].tolist()
ids_ph15_ts = ids_base[folds_base == '15-philips|ts'].tolist()

ids_sm15_tr = ids_base[folds_base == '15-siemens|tr'].tolist()
ids_sm15_ts = ids_base[folds_base == '15-siemens|ts'].tolist()

ids_ge30_tr = ids_base[folds_base == '3-ge|tr'].tolist()
ids_ge30_ts = ids_base[folds_base == '3-ge|ts'].tolist()

ids_ph30_tr = ids_base[folds_base == '3-philips|tr'].tolist()
ids_ph30_ts = ids_base[folds_base == '3-philips|ts'].tolist()

ids_sm30_tr = ids_base[folds_base == '3-siemens|tr'].tolist()
ids_sm30_ts = ids_base[folds_base == '3-siemens|ts'].tolist()

cache_size = None

use_cyclegan2d = False
generator = None

use_cyclegan3d = False
generator3d = None

dataset = Chain(
    dataset_base, MultiClassZoom(new_spacing=CC359_SPACING, labels_list=labels_list), ScaleQ(), Shape(),
    CycleGAN2DPredict(generator=generator, device=device) if use_cyclegan2d else Identity(),  # CycleGAN2D: autorun
    CycleGAN3DPredict(generator=generator3d, device=device) if use_cyclegan3d else Identity(),  # CycleGAN3D: autorun
    Apply(image=np.float16, mask=np.uint8),
    CacheToRam(('ids', 'shape', 'image', 'mask', 'orig_mask'), size=cache_size),
    Apply(image=np.float32, mask=np.float32)
)

load_x = dataset.image
load_y = dataset.mask

pred_n_add_dims = 2
pred_n_extract_dims = 1
