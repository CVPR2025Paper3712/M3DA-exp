import numpy as np
from amid.internals import CacheToDisk
from amid.amos import AMOS
from connectome import Apply, CacheToRam, Chain, Filter

from m3da_exp.const import AMOS_CT_SPACING
from m3da_exp.dataset.amos import AddFold, CTKernel, CTNoise
from m3da_exp.dataset.cyclegan import CycleGAN2DPredict, CycleGAN3DPredict
from m3da_exp.dataset.utils import Identity, MultiClassZoom, None2ZeroMask, Orig, ScaleQ, Shape
from m3da_exp.paths import AMOS_PATH_RAW


n_chans_in = 1
n_chans_out = 16
labels_list = tuple(range(n_chans_out))
background_logit_idx = 0

dataset_base = Chain(
    AMOS(AMOS_PATH_RAW) >> Filter(lambda id: int(id) <= 600),  # first AMOS data iteration!
    Orig() >> AddFold() >> CacheToDisk(('ids', 'fold')) >> CacheToRam(('ids', 'fold'))
)

ids_base = np.array(dataset_base.ids)
folds_base = np.array(list(map(dataset_base.fold, ids_base)))

ids_ct_0 = ids_base[folds_base == 'ct|l|0'].tolist()
ids_ct_1 = ids_base[folds_base == 'ct|l|1'].tolist()
ids_ct_l = sorted(ids_ct_0 + ids_ct_1)
ids_ct_u = ids_base[folds_base == 'ct|u|None'].tolist()

ids_mri_l = ids_base[folds_base == 'mri|l|None'].tolist()
ids_mri_u = ids_base[folds_base == 'mri|u|None'].tolist()

noise_mode = None  # "ldct"
noise_folds = tuple()  # ('ct|u|None', 'ct|l|1', 'ct|l|0')

soft_folds = tuple()  # ('ct|u|None', 'ct|l|1', 'ct|l|0')
sharp_folds = tuple()  # ('ct|u|None', 'ct|l|1', 'ct|l|0')

new_spacing = AMOS_CT_SPACING
cache_size = None

use_cyclegan2d = False
generator = None

use_cyclegan3d = False
generator3d = None

dataset = Chain(
    dataset_base,
    CTNoise(mode=noise_mode, apply_folds=noise_folds),
    CTKernel(soft_folds=soft_folds, sharp_folds=sharp_folds),  # random_state is not needed due to loading from folder
    MultiClassZoom(new_spacing=new_spacing, labels_list=labels_list), ScaleQ(), Shape(),
    None2ZeroMask(),  # AdaBN: correct batch_iter execution on unlabeled data
    CycleGAN2DPredict(generator=generator, device=device) if use_cyclegan2d else Identity(),  # CycleGAN2D: autorun
    CycleGAN3DPredict(generator=generator3d, device=device) if use_cyclegan3d else Identity(),  # CycleGAN3D: autorun
    Apply(image=np.float16, mask=np.uint8),
    CacheToRam(('ids', 'shape', 'image', 'mask', 'orig_mask'), size=cache_size),
    Apply(image=np.float32, mask=np.float32)
)

load_x = dataset.image
load_y = dataset.mask

pred_n_add_dims = 2
pred_n_extract_dims = 1
