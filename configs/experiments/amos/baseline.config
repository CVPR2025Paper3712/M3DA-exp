from ...assets.core import *
from ...assets.dataset.amos import *
from ...assets.batch_iter.ps3d import *
from ...assets.architecture.nnunet.amos import *
from ...assets.metric.mcls_segm import *

from m3da_exp.const import AMOS_MRI_SPACING


apply_d48 = False
val_size = 0

# ### MRI -> CT ###
split = [[ids_mri_l, ids_mri_l[:val_size], ids_mri_l + ids_ct_1]]
new_spacing = AMOS_MRI_SPACING

# ### CT (-> MRI) ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_mri_l + ids_ct_1]]

# ### CT -> LDCT ### only inference ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# noise_mode = "ldct"
# noise_folds = ('ct|l|1', )

# ### LDCT (oracle) ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# noise_mode = "ldct"
# noise_folds = ('ct|l|0', 'ct|l|1', )

# ### Soft -> Sharp (baseline) ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# soft_folds = ('ct|l|0', )
# sharp_folds = ('ct|l|1', )

# ### Sharp -> Soft (baseline) ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# sharp_folds = ('ct|l|0', )
# soft_folds = ('ct|l|1', )

# ### Sharp -> Sharp (oracle) ### only inference ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# sharp_folds = ('ct|l|0', 'ct|l|1', )

# ### Soft -> Soft (oracle) ### only inference ###
# split = [[ids_ct_0, ids_ct_0[:val_size], ids_ct_1]]
# soft_folds = ('ct|l|0', 'ct|l|1', )

cache_size = len(split[0][0]) + len(split[0][1]) + val_size
